////////////////////////////////////////////////////////////////////////////////

rule_02_prompt_process

r_2a__ terms             - Standard prompt terminology
r_2a_1    file           - Physical text file containing prompts
r_2a_2    group          - Collection of related prompts within a prompt_file
r_2a_3    prompt         - Written prompts that were or will be entered to an AI copilot
r_2a_4    summary        - Short description of what the prompt does and appears as the first line in the prompt
r_2a_5    task_name      - Name for a task 
r_2a_6    task           - Detailed implementation instruction within a prompt
r_2a_7    marker         - Indicator showing current execution position within prompt files
r_2a_8    rule           - Established guidelines and constraints for project workflow
r_2a_9    separator      - Visual divider between sections in files
r_2a10    file           - Digital document containing structured content
r_2a11    alignment      - Visual arrangement for readability and structure
r_2a12    id             - Alphanumeric id pattern used in documentation (r_1a__, p_2b_3)
r_2a13    file_number    - Two-digit number in filename (e.g., 01 in rule_01_codename.txt, 01 in req_01_outline.txt)
r_2a14    file_kernal    - Collection of core files that implement the codename methodology
r_2a15    uniqueness     - File numbers must be unique across all files in the same directory;
                          no two files in the same directory can share the same file number,
                          even if they have different prefixes (rule_, prompt_, req_)
r_2a16    applies_to_req - All file number rules apply equally to requirement files (req_*) as to rule and prompt files.

r_2a__ prompt_rules      - Additional prompt processing rules (non-term definitions)
r_2a17    separator      - In prompt (and requirement) files, always use a greater-than sign (>) (or equivalent) as the separator between the task name and its description (e.g. "p_2a__ summary >..."). This reduces the chance of errors (such as using a dash (â€“) instead). Every prompt execution must include a check to ensure this formatting is correct before proceeding.
r_2a18    log_prompt     - Every prompt (whether submitted via the colonel mechanism or by hand) must be logged (recorded) into prompt_00_log.txt. Append a separator (e.g. 80 forward slashes), a timestamp, the source (colonel or hand), and the complete prompt content. This rule ensures that a log of all prompts is maintained.
r_2a19    apply_format_code - When processing a prompt, if any code file (for example, index.html, style.css, main.js) is changed, the assistant must apply the strict formatting conventions defined in rule_06_format_code (or "rule six format code") to that file. This rule ensures that every code file is formatted according to the strict conventions.

r_2b__ process          - Process for prompts
r_2b_1    command        - "do" executes prompt_current at marker position; specific group formats: "do p_1a"
r_2b_2    sync           - If markers are out of sync then first ask what to do -- because it isn't clear which one to choose
r_2b_3    tracking       - Find the marker in file_current to determine next actions
r_2b_4    retrieval      - Retrieve and process the next prompt_current or group_current for execution
r_2b_5    control        - Only execute one prompt_current or group_current at a time for controlled progress
r_2b_6    scope          - Maintain clear boundaries around the current execution scope
r_2b_7    limits         - Don't create features, files, or functionality not directly requested
r_2b_8    update         - "update prompts" command: review requirement files and update prompt_future
                          files to incorporate all appropriate requirements; only update prompts
                          below or after the marker position, never prompt_past
r_2b_9    avoid_loops    - If an edit fails more than once, stop and ask the user for a more specific instruction.

r_2c__ marker           - Marker format and position
r_2c_1    format         - Use triple-slash format: /// YOU ARE HERE ///
r_2c_2    initial        - Place marker at TOP of prompt_01_start.txt and before it in outline
r_2c_3    position       - Marker must be placed at TOP of file_current, immediately after separator
r_2c_4    single         - Only one marker exists in file_current and outline file
r_2c_5    timing         - Marker movement occurs:
                          1) Before processing: Move marker to TOP of target file when "do" command is issued
                          2) After completion: Remove marker from completed file and move to TOP of next file
r_2c_6    sequence       - Marker movement sequence for "do" command:
                          1) Remove marker from current position in outline
                          2) Remove marker from current file if it exists
                          3) Add marker to TOP of target file
                          4) Add marker to corresponding position in outline
                          5) Process the file
                          6) After completion, repeat steps 1-4 for next file

r_2d__ implement        - Implementing prompts efficiently
r_2d_1    isolation      - Execute only the relevant prompt rather than entire prompt_group or files
r_2d_2    focus          - Keep implementation focused on current task without scope creep
r_2d_3    complete       - Finish one prompt/group before moving to the next
r_2d_4    verify         - Verify implementation meets requirements before proceeding
r_2d_5    explicit       - Only implement what is explicitly requested, nothing more
r_2d_6    minimal        - Use the simplest implementation that satisfies requirements

r_2e__ document         - Documenting process
r_2e_1    notes          - Add implementation notes directly after executing a prompt
r_2e_2    outcomes       - Document specific outcomes, changes, and decisions made
r_2e_3    challenges     - Note any challenges encountered and their resolutions
r_2e_4    next           - Include recommendations for next steps after completion
r_2e_5    depends        - Document any dependencies created or affected by implementation

r_2f__ brevity          - Brief chat messages
r_2f_1    concise        - Keep chat responses approximately half the typical length
r_2f_2    direct         - Provide direct, to-the-point answers without excessive explanations
r_2f_3    essential      - Include only essential information needed to address the query
r_2f_4    minimal        - Minimize contextual explanations unless specifically requested
r_2f_5    action         - Focus on actions taken rather than explaining process details
r_2f_6    examples       - Include minimal examples only when necessary for clarity
r_2f_7    format         - Format chat responses using nested bullet points:
                          1) Use short, single-line bullets for main points
                          2) Indent sub-points with 2 spaces
                          3) Maximum 3 levels of nesting
                          4) Each bullet should be a complete thought
                          5) Use consistent indentation for each level
r_2f_8    structure      - Structure chat responses as:
                          1) Brief summary (1-2 lines)
                          2) Action taken (nested bullets)
                          3) Next steps (if any)

r_2m__ movement         - Marker movement rules
r_2m_1    do_command     - "do" without parameters: 
                          1) Move marker to TOP of current file if not already there
                          2) Process from marker position
                          3) After completion, move marker to TOP of next prompt_future file
r_2m_2    do_group       - "do [group]": 
                          1) Move marker to TOP of file containing group
                          2) Process only that group_current
                          3) After completion, move marker to TOP of next prompt_future file
r_2m_3    completion     - Move marker to TOP of next prompt_future file after completing any prompt processing
r_2m_4    placement      - Marker must be at TOP of file_current, immediately after separator
r_2m_5    progress       - Move marker to TOP of next prompt_future file when file_current is fully processed
r_2m_6    sync           - Keep markers synchronized between file_current and prompt_outline_file:
                          1) Marker in outline must point to current active file
                          2) Marker in current file must be at TOP
                          3) No markers in prompt_past files
r_2m_7    remove         - When moving marker to next file:
                          1) Remove marker from current prompt file (prompt_past)
                          2) Remove marker from corresponding position in prompt_outline_file
                          3) Add marker to TOP of next prompt_future file
                          4) Add marker to corresponding position in prompt_outline_file
r_2m_8    verify         - Double-check marker positions after completion to ensure:
                          1) markers exist in file_current and prompt_outline_file
                          2) marker_file name matches file_current
                          3) marker positions in file_current and prompt_outline_file are consistent
                          4) markers are not at the end of any file
                          5) no markers exist in prompt_past files

r_2n__ reset            - Reset command handling
r_2n_1    command        - "reset marker" command: restore markers to initial positions
r_2n_2    placement      - Put marker at TOP of prompt_01_start.txt and before it in prompt_outline
r_2n_3    cleanup        - Remove markers from all prompt_past files
r_2n_4    verify         - Double-check after reset that markers are correctly positioned and
                          no duplicate markers exist in any files
r_2n_5    prompts        - IMPORTANT: When user says "reset prompts" (or similar variations like 
                          "reset prompt", "reset the prompts", etc.):
                          1) Delete all prompt_future files except prompt_01_start.txt
                          2) Update prompt_outline.txt to:
                             a) Only list prompt_01_start.txt and its groups
                             b) Remove ALL entries for prompt_future files
                             c) Remove ALL groups for prompt_future files
                             d) Keep only the marker and prompt_01_start.txt section
                             e) Maintain exact format: filename followed by groups
                             f) Remove all X marks from remaining items
                          3) Verify prompt_outline.txt contains:
                             a) No references to deleted prompt files
                             b) No groups from deleted prompt files
                             c) Only prompt_01_start.txt and its groups
                             d) Marker in correct position
                          4) Ensure prompt_outline.txt matches actual prompt files present
                          5) Clear prompt_00_log.txt to empty state:
                             a) Remove all content
                             b) Keep the file itself (do not delete it)
                             c) File should be empty (0 bytes)
r_2n_6    codenames      - "reset codenames" command: clear codenames in req_02_codename.txt;
                          restore file to initial state for starting implementation from scratch
r_2n_7    app            - "reset app" command: delete all files and directories inside the app directory
                          within the kernal directory; restore app directory to empty state

r_2o__ command_recognition - Command recognition and handling
r_2o_1    variations     - Recognize command variations (e.g., "reset prompts", "reset prompt", 
                          "reset the prompts") as equivalent to the standard command
r_2o_2    intent         - When user intent is clear (e.g., "reset prompts"), execute the full 
                          command sequence even if exact wording varies
r_2o_3    confirmation   - Only ask for confirmation if command intent is ambiguous
r_2o_4    standard       - Standard command forms are:
                          a) "reset prompts" - Reset all prompts to initial state
                          b) "reset marker" - Reset marker positions
                          c) "reset codenames" - Reset codename files
                          d) "reset app" - Reset application files

r_2o__ marker_file      - External marker file tracking
r_2o_1    naming         - File format: prompt_xx_-YOU_ARE_HERE.txt (xx = active prompt number)
r_2o_2    hyphen         - Hyphen ensures file sorts before corresponding prompt file
r_2o_3    sync           - Update when marker moves between prompt files
r_2o_4    reset          - Reset to prompt_00_-YOU_ARE_HERE.txt on "reset marker" command
r_2o_5    verify         - Ensure only one marker file exists and its name correctly
                           corresponds to the current active prompt file

r_2p__ requirements     - Requirements management
r_2p_1    scope          - When updating prompts files from requirements, only populate tasks for prompt_current 
                          group and next prompt_future group
r_2p_2    future         - For prompt_future groups beyond next, only include prompt_group_name
                          without populating detailed tasks
r_2p_3    preserve       - Never modify prompt_past; these are considered already processed
r_2p_4    update         - Only update prompts at or below current marker position and in
                          subsequent prompt_future files

r_2q__ log          - Prompt log tracking
r_2q_1    file          - Maintain prompt_00_log.txt to log all prompts
r_2q_2    scope         - Record both file-based prompts and direct user prompts
r_2q_3    format        - Format each entry with:
                          1) Blank line before separator (except at file start)
                          2) Single separator line (80 forward slashes)
                          3) Blank line after separator (except at file end)
                          4) Prompt content on next line
                          5) No titles, timestamps, sources, or additional context
r_2q_4    timing        - Add entries immediately after receiving any prompt
r_2q_5    location      - Store in kernal/prompt/prompt_00_log.txt
r_2q_6    update        - Update log file before processing any prompt
r_2q_7    empty         - File can be completely empty; no header or summary required
r_2q_8    structure     - When empty, file contains no content; when populated, each entry
                          follows the format rules with single separator between entries
r_2q_9    colonel       - IMPORTANT: All prompts from prompt files must be logged with source "colonel"
                          when they are read and processed, not just direct user prompts
r_2q10    spacing       - IMPORTANT: Maintain blank lines around separators:
                          1) No blank line before first separator (file start)
                          2) No blank line after last separator (file end)
                          3) Blank line before and after all other separators

r_2h__ file_number      - File number rules
r_2h_1    format         - Use two-digit numbers (01-99) for file numbers in all files, including requirement files (req_*)
r_2h_2    uniqueness     - Each file number must be unique within its directory, including requirement files
r_2h_3    prefix         - Different file types (rule_, prompt_, req_) can use same file number in different directories, but not in same directory
r_2h_4    sequence       - File numbers should be assigned sequentially without gaps, including for requirement files
r_2h_5    reference      - When referencing files, always include the file number, including for requirement files
r_2h_6    organization   - File numbers help maintain clear organization and ordering for all file types
r_2h_7    tracking       - File numbers enable tracking of file relationships and dependencies for all file types

//////////////////////////////////////////////////////////////////////////////// 