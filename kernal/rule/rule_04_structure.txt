////////////////////////////////////////////////////////////////////////////////

rule_04_structure

r_4a__ dir              - Directory structure rules
r_4a_1    root          - Keep kernal as the root directory for all methodology files
r_4a_2    organization  - Organize files into subdirectories by type (prompt, req, rule)
r_4a_3    prompt        - Store all prompt files in the prompt/ subdirectory
r_4a_4    req           - Store all requirement files in the req/ subdirectory
r_4a_5    rule          - Store all rule files in the rule/ subdirectory
r_4a_6    shared        - Keep index_codename.txt and kernal_dir_list.txt in the root directory
r_4a_7    consistency   - Maintain consistent naming conventions across all directories

r_4b__ kernal_dir       - Kernal directory organization
r_4b_1    purpose       - Organize files by type to improve project navigation and maintainability
r_4b_2    structure     - Follow a consistent three-directory structure (prompt, req, rule)
r_4b_3    reference     - Use kernal_dir_list.txt to document the directory structure
r_4b_4    flexibility   - Allow for future expansion with additional subdirectories as needed
r_4b_5    access        - Ensure all files remain accessible through consistent directory paths

r_4c__ path             - File path references
r_4c_1    relative      - Use relative paths when referencing files within the kernal directory
r_4c_2    forward       - Use forward slashes for path separators (e.g., prompt/prompt_01_start.txt)
r_4c_3    explicit      - Include the full path from the kernal directory when referencing files
r_4c_4    consistency   - Apply consistent path referencing across all documentation
r_4c_5    subdirectory  - Always include the appropriate subdirectory when referencing files

//////////////////////////////////////////////////////////////////////////////// 